#My Name is Optimus Prime
#The autobots and I fled our world


import time #import files
import board
import pwmio
import rotaryio
import analogio
import pulseio
import digitalio
import simpleio
from adafruit_motor import motor
from PID_CPY import PID
from analogio import AnalogOut, AnalogIn
from digitalio import DigitalInOut, Direction, Pull

AIN1 = pwmio.PWMOut(board.D7,duty_cycle=2 ** 20, frequency=40) #motor ouput
AIN2 = pwmio.PWMOut(board.D6,duty_cycle=2 ** 20, frequency=40)
BIN1 = pwmio.PWMOut(board.D9,duty_cycle=2 ** 20, frequency=40)
BIN2 = pwmio.PWMOut(board.D8,duty_cycle=2 ** 20, frequency=40)

motor1 = motor.DCMotor(AIN1,AIN2)
motor2 = motor.DCMotor(BIN1,BIN2)

encoder = rotaryio.IncrementalEncoder(board.D1, board.D2) #encoder definitions
last_position = 0
state = 0 #encoder value

photoVal = False           
oldPhotoVal = False # Used to make sure we only count the first loop when interupt is broken   
photoint = DigitalInOut(board.D11) #identify photointerrupter
photoint.pull =Pull.UP #pull up photointerrupter

previous_time = 0.0 #defines time values for RPM caluclations
current_time = 1.0 
time_diff = 0.0
time_diff = current_time - previous_time #defines time differential between wheel spokes

rpmCheckTime = 0.0 #checks half second rpm to pid intervals
rpmCheckState = True #starts by checking rpm
rpm = 0 #defines rpm as integer

pid = PID(5,0.1,0.05,setpoint=0) #creates pid values
pid.output_limits = (0,680) #defines pid limits

while True:
    photoVal = photoint.value #redifines photointerrupter value
    if time.monotonic() > rpmCheckTime + 0.5: #checks every half second
        rpmCheckState = not rpmCheckState #switches from rpm to pid
        previous_time = time.monotonic() 
        rpmCheckTime = previous_time #resets check time     

    if rpmCheckState: #if calculating rpm
        if  not photoVal and oldPhotoVal:
            current_time = time.monotonic() #create a timer
            time_diff = current_time - previous_time + 0.001 #define time differentail
            #Speed = Distance / Time
            rpm = 60 / (8.0 * time_diff) #calculate rpm
            time.sleep(.0)
            
    else:
        print("RPM: " + str(rpm) + ", " + "Time Diff: " + str(time_diff)) #print rmp and time diff on serial monitor
        time.sleep(0.5)
        position = encoder.position #create encoder position
        if position != last_position: #if positional has changed
            if position > last_position: # and is greater 
                state = state + 1 #add one to encoder value
            elif position < last_position: #if position is less
                state = state - 1 #subtract one to encoder value
        if state > 0: #if encoder value is greater than zero
            pid.auto_mode = False #pid is off
            print("Enocder: " + str(state))
            motor1.throttle = float(simpleio.map_range(state,1,10,0.0,1.0)) * -1 #set motor throttle in accordance to encoder
            motor2.throttle = float(simpleio.map_range(state,1,10,0.0,1.0)) * -1
            print("Motor Value: " + str(motor1.throttle * -1)) #print motor power
        if state < 0: #if encoder is less than zero
            print("Enocder: " + str(state))
            pid.auto_mode = True #pid is on
            pid.setpoint = int(simpleio.map_range(state,-10,-1,0,680)) #maps setpoint to encoder
            control = pid(rpm) #creates pid variable
            motor1.throttle = float(simpleio.map_range(control,0,680,0.0,1.0)) #maps setpoint rpm to speed
            motor2.throttle = float(simpleio.map_range(control,0,680,0.0,1.0))
            print("Motor Value: " + str(motor1.throttle)) #print motor speed
        if state is 0: #if state is zero
            print("Enocder: " + str(state))
            motor1.throttle = 0 #motors are off
            motor2.throttle = 0
            print("Motor Value: " + str(motor1.throttle))
        last_position = position #reset last position
    oldPhotoVal = photoVal #reset photointerrupter
    previous_time = current_time #reset previous time

